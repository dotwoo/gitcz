# This is an example goreleaser.yaml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
project_name: startName
env:
  - GO111MODULE=on
  - GOPROXY=https://goproxy.io

before:
  hooks:
    # you may remove this if you don't use vgo
    - go mod tidy
    # you may remove this if you don't need go generate
    # - go generate ./...

builds:
  # You can have multiple builds defined as a yaml list
  - # ID of the build.
    # Defaults to the project name.
    id: "startName"

    # Path to main.go file or main package.
    # Default is `.`.
    main: "MainDir"

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    # Default is the name of the project directory.
    binary: "{{ .ProjectName }}"

    # Custom flags templates.
    # Default is empty.
    # flags:
    #   - -tags=dev
    #   - -v

    # Custom environment variables to be set during the builds.
    # Default is empty.
    env:
      - CGO_ENABLED=1

    # Custom ldflags templates.
    # Default is `-s -w -X main.version={{.Version}} -X main.commit={{.ShortCommit}} -X main.date={{.Date}} -X main.builtBy=goreleaser`.
    ldflags:
      - -s -w
#      - -X {{.ProjectName}}/g.Version={{.Version}}
#      - -X {{.ProjectName}}/g.BuildTime={{.Date}}
#      - -X {{.ProjectName}}/g.ProgName={{.ProjectName}}

    # GOOS list to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are darwin and linux.
    goos:
      - darwin
      - linux
      - windows


    # GOARCH to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are 386 and amd64.
    goarch:
      - amd64

    # List of combinations of GOOS + GOARCH + GOARM to ignore.
    # Default is empty.
    ignore:
      - goos: darwin
        goarch: 386
      - goos: windows
        goarch: 386

    # Hooks can be used to customize the final binary,
    # for example, to run generators.
    # Those fields allow templates.
    # Default is both hooks empty.
    # hooks:
    #   pre: rice embed-go
    #   post: ./script.sh


archives:
  - id: default
    files:
      - licence*
      - LICENCE*
      - license*
      - LICENSE*
      - readme*
      - README*
      - changelog*
      - CHANGELOG*

nfpms:
  # note that this is an array of nfpm configs
  - # ID of the nfpm config, must be unique.
    # Defaults to "default".
    id: default
    # You can change the name of the package.
    # Default: `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}`
    name_template: "{{ .ProjectName }}_{{ .Version }}-{{.Env.COMPILE_NUM}}_{{ .Arch }}"

    # Build IDs for the builds you want to create NFPM packages for.
    # Defaults to all builds.
    builds:
      - startName

    # Replacements for GOOS and GOARCH in the package name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.
    # replacements:
    #   amd64: 64-bit
    #   386: 32-bit
    #   darwin: macOS

    # Your app's vendor.
    # Default is empty.
    vendor: Dotwoo
    # Your app's homepage.
    # Default is empty.
    homepage: https://dotwoo.cn/

    # Your app's maintainer (probably you).
    # Default is empty.
    maintainer: dotwoo<dotwoo@gmail.com>

    # Your app's description.
    # Default is empty.
    description: Software to test goreleaser.

    # Your app's license.
    # Default is empty.
    license: Apache 2.0

    # Formats to be generated.
    formats:
      - rpm

    # # Packages your package depends on.
    # dependencies:
    #   - git
    #   - zsh

    # # Packages your package recommends installing.
    # recommends:
    #   - bzr
    #   - gtk

    # # Packages your package suggests installing.
    # suggests:
    #   - cvs
    #   - ksh

    # # Packages that conflict with your package.
    # conflicts:
    #   - svn
    #   - bash

    # # Override default /usr/local/bin destination for binaries
    bindir: /usr/local/startName/bin

    # Package epoch.
    # Defaults to empty.
    epoch: 1

    # Empty folders that should be created and managed by the packager
    # implementation.
    # Default is empty.
    #empty_folders:
    #  - /usr/local/startName/run/
    #  - /usr/local/startName/logs/
    #  - /usr/local/startName/scripts/
    #  - /usr/local/startName/public/

    # Files or directories to add to your package (beyond the binary).
    # Keys are source paths/globs to get the files from.
    # Values are the destination locations of the files in the package.
    #files:
    #  "build/source/logrotate.txt": "/etc/logrotate.d/startName"
    #  "build/source/service.conf": "/lib/systemd/system/startName.service"

    # Config files to add to your package. They are about the same as
    # the files keyword, except package managers treat them differently (while
    # uninstalling, mostly).
    # Keys are source paths/globs to get the files from.
    # Values are the destination locations of the files in the package.
    #config_files:
    #  "etc/config.yml": "/usr/local/startName/etc/config.yml"

    # Scripts to execute during the installation of the package.
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed
    #scripts:
    #  preinstall: ""
    #  postinstall: ""
    #  preremove: ""
    #  postremove: ""

    # Some attributes can be overrided per package format.
    overrides:
      rpm:
        replacements:
          amd64: x86_64
        name_template: "{{ .ProjectName }}-{{ .Version }}-{{.Env.COMPILE_NUM}}-{{ .Arch }}"

checksum:
  name_template: "checksums.txt"
snapshot:
  name_template: "{{ .Tag }}"
changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"
